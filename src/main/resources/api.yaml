openapi: "3.0.0"

info:
  title: Ecommernce API
  description: Ecommernce API
  version: "0.1"

tags:
  - name: Users
    description: User Description

paths:
  ###########################################################################################
  # Users
  ###########################################################################################
  /users:
    get:
      tags:
        - Users
      summary: Get all market streams, or only those for a specific stream.
      operationId: getAllUsers
      description: Returns either all available market type stream relations, or only those for chosen stream.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a user by its id
      operationId: getUser
      description: Get a user by its id
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the user
          schema:
            type: integer
            format: int64
        - in: query
          name: myRequestParam
          required: false
          description: The id of the sport to return
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    put:
      tags:
        - Users
      summary: Update a user by its id
      operationId: updateUser
      description: Update a user by its id
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the user
          schema:
            type: integer
            format: int64
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    delete:
      tags:
        - Users
      summary: Delete user by id
      operationId: deleteUser
      description: Delete user by id
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the user
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      operationId: registerUser
      description: Registers a new user
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationDto'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
  /users/login:
    post:
      tags:
        - Users
      summary: Login an existing user
      operationId: loginUser
      description: Login an existing user
      requestBody:
        description: User login details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDto'
      responses:
        '200':
          description: User logged successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
  ###################################
  ###########    Product    #########
  ###################################
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      operationId: getAllProducts
      description: Retrieve a list of all products.
      responses:
        '200':
          description: A list of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDto'
    post:
      tags:
        - Products
      summary: Create a new product
      operationId: createProduct
      description: Add a new product to the catalog.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
      responses:
        '201':
          description: Product created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get a product by ID
      operationId: getProductById
      description: Retrieve details of a specific product by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the product.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '404':
          description: Product not found.
    put:
      tags:
        - Products
      summary: Update a product
      operationId: updateProduct
      description: Update details of an existing product.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the product to update.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
      responses:
        '200':
          description: Product updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '404':
          description: Product not found.
    delete:
      tags:
        - Products
      summary: Delete a product
      operationId: deleteProduct
      description: Remove a product from the catalog.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the product to delete.
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product deleted successfully.
        '404':
          description: Product not found.
  #######################################
  ######### Package #####################
  #######################################
  /packages:
    get:
      tags:
        - Packages
      summary: Get all packages
      operationId: getAllPackages
      description: Retrieve a list of all packages.
      responses:
        '200':
          description: A list of packages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PackageDto'
    post:
      tags:
        - Packages
      summary: Create a new package
      operationId: createPackage
      description: Add a new package
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackageDto'
      responses:
        '201':
          description: Package created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageDto'
  /packages/{id}:
    get:
      tags:
        - Packages
      summary: Get a package by ID
      operationId: getPackageById
      description: Retrieve details of a specific package by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the package.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Package details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageDto'
        '404':
          description: Package not found.
    put:
      tags:
        - Packages
      summary: Update a package
      operationId: updatePackage
      description: Update details of an existing package.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the package to update.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackageDto'
      responses:
        '200':
          description: Package updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageDto'
        '404':
          description: Package not found.
    delete:
        tags:
          - Packages
        summary: Delete a package
        operationId: deletePackage
        description: Remove a package from the catalog.
        parameters:
          - name: id
            in: path
            required: true
            description: The ID of the package to delete.
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: Package deleted successfully.
          '404':
            description: Package not found.
#######################################
######     Package           ##########
#######################################

components:
  schemas:
    UserDto:
      type: object
      description: UserDto
      required:
        - marketUpdates
      properties:
        id:
          type: integer
          format: int64
          description: The id of the event
        name:
          type: string
          description: The name of the event
        email:
          type: string
          description: The name of the event
        address:
          type: string
          description: The name of the event
    UserRegistrationDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        address:
          type: string
          description: The address of the user
        password:
          type: string
          description: The password of the user
      required:
        - name
        - email
        - address
        - password
    UserLoginDto:
      type: object
      properties:
        email:
          type: string
          description: The email of the user
        password:
          type: string
          description: The password of the user
      required:
        - email
        - password
    ProductDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The id of the product
        name:
          type: string
          description: The name of the product
        description:
          type: string
          description: Description of the product
        price:
          type: number
          format: double
    PackageDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the package.
        sender:
          $ref: '#/components/schemas/UserDto'
          description: The user who sends the package.
        receiver:
          $ref: '#/components/schemas/UserDto'
          description: The user who receives the package.
        status:
          type: string
          description: The current status of the package (e.g., Pending, Delivered, Returned).
        deliveryDate:
          type: string
          format: date
          description: The delivery date of the package.
      required:
        - id
        - sender
        - receiver
        - status
        - deliveryDate